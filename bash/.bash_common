#!/usr/bin/env bash
shopt -s direxpand

install_or_update_ohmyposh() {
    sudo -v
    echo 'Downloading latest oh-my-posh...'
    if sudo curl -sSL https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/posh-linux-amd64 -o /usr/local/bin/oh-my-posh; then
        echo 'Download completed'
        echo 'Adding execute permission'
        sudo chmod +x /usr/local/bin/oh-my-posh
        echo 'Done.'
    fi
}

if ! command -v oh-my-posh &> /dev/null; then
    install_or_update_ohmyposh
fi

if [ -f "$HOME"/dotfiles/oh-my-posh/ohmyposh.json ]; then
    eval "$(oh-my-posh init bash --config "$HOME"/dotfiles/oh-my-posh/ohmyposh.json)"
    oh-my-posh toggle kubectl
else
    export PS1='\[\e[0;38;5;39m\][\[\e[0;38;5;39m\]\u\[\e[0;38;5;39m\]@\[\e[0;38;5;39m\]\h\[\e[0;38;5;39m\]]\[\e[m\] \[\e[0;38;5;35m\]\w\[\e[m\]\[\e[0;38;5;37m\]$(parse_git_branch)\[\e[m\]\n\[\e[0;38;5;22m\]\$\[\e[0m\] '
fi

if command -v nvim &> /dev/null; then
    alias vim='nvim'
    export EDITOR=nvim
elif command -v vim &> /dev/null; then
    export EDITOR=vim
fi

if command -v java &> /dev/null; then
    JAVA_HOME="$(dirname "$(dirname "$(readlink -f "$(which java)")")")"
    export JAVA_HOME
fi

if command -v aws &> /dev/null; then
    complete -C "$(which aws_completer)" aws
fi

export PATH="$HOME/.tfenv/bin:$PATH"
if command -v terraform &> /dev/null; then
    complete -C "$(which terraform)" terraform
    complete -C "$(which terraform)" tf
fi

if command -v kubectl &> /dev/null; then
    # shellcheck source=/dev/null
    . <(kubectl completion bash)
    complete -F __start_kubectl k
fi

if command -v minikube &> /dev/null; then
    # shellcheck source=/dev/null
    . <(minikube completion bash)
fi

if command -v eksctl &> /dev/null; then
    # shellcheck source=/dev/null
    . <(eksctl completion bash)
fi

if [ -f "$HOME"/.nvm/nvm.sh ]; then
    # shellcheck source=/dev/null
    . "$HOME"/.nvm/nvm.sh
fi

# Aliases
if grep -q microsoft /proc/version; then
    alias e.='explorer.exe .'
    alias pwsh='pwsh.exe'
fi

alias gb='git branch -vv'
alias glog='git log --graph --decorate --oneline'
alias gs='git status'
alias gtop='cd `git rev-parse --show-toplevel`'
alias k='kubectl'
alias kt='oh-my-posh toggle kubectl'
alias ls='ls -lah --color=auto'
alias mvnfull='mvn clean install -PautoInstallSinglePackage'
alias mvnquick='mvn clean install -PautoInstallBundle -DskipTests -Dcheckstyle.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dspotbugs.skip=true'
alias tf='terraform'
alias tft='terraform_target'
alias v.='vim .'

distro=$(grep '^ID=' /etc/os-release | awk -F '=' '{print $2}')
if [ "$distro" == ubuntu ]; then
    alias upd='sudo apt update && sudo apt upgrade -y'
elif [ "$distro" == fedora ]; then
    alias upd='sudo dnf upgrade -y'
fi

# Functions
lower() {
    echo "$1" | tr '[:upper:]' '[:lower:]'
}

upper() {
    echo "$1" | tr '[:lower:]' '[:upper:]'
}

parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

git_clean_branches() {
    git fetch -p
    git branch -vv | grep ': gone]' | while read -r branch; do
        git branch -D "${branch%% *}"
    done
}

git_https() {
    git remote set-url origin "$(git remote get-url origin | sed -e 's/git@bitbucket\.org:/https:\/\/kdien@bitbucket\.org\//')"
}

git_ssh() {
    git remote set-url origin "$(git remote get-url origin | sed -e 's/https:\/\/kdien@bitbucket\.org\//git@bitbucket\.org:/')"
}

set_apt_proxy() {
    echo 'Acquire::http::Proxy "http://proxy.example.com:8080";' | sudo tee -a /etc/apt/apt.conf
}

unset_apt_proxy() {
    sudo sed -i "s/Acquire::http::Proxy.*//" /etc/apt/apt.conf
}

add_vlt() {
    vlt st | grep \? | cut -c 2- | xargs -I {} vlt add {}
}

rm_vlt() {
    vlt st | grep ! | cut -c 2- | xargs -I {} vlt rm {}
}

terraform_target() {
    local file=$1
    local pattern=$2

    if [ -n "$pattern" ]; then
        grep '^resource\|^module' "$file" | grep -E "$pattern" | sed 's/resource "\(.*\)" "\(.*\)".*/--target \1.\2 /;s/module "\([^"]*\)".*/--target module.\1 /'
    else
        grep '^resource\|^module' "$file" | sed 's/resource "\(.*\)" "\(.*\)".*/--target \1.\2 /;s/module "\([^"]*\)".*/--target module.\1 /'
    fi
}

install_or_update_awscli() {
    curl 'https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip' -o 'awscliv2.zip'
    unzip awscliv2.zip
    sudo ./aws/install --update
    rm -rf awscliv2.zip aws
}

apply_win_terminal_config() {
    cat "$HOME/dotfiles/WindowsTerminal/settings.json" > "$HOME/win_home/AppData/Local/Packages/Microsoft.WindowsTerminal_8wekyb3d8bbwe/LocalState/settings.json"
}

open() {
    case "$(uname -sr)" in
        Darwin*)
            /usr/bin/open "$1"
            ;;
        Linux*Microsoft*|Linux*microsoft*)
            file=$(echo "$1" | sed -e 's/\//\\/g')
            powershell.exe -Command "Invoke-Item $file"
            ;;
        Linux*)
            if command -v xdg-open &> /dev/null; then
                xdg-open "$1"
            fi
            ;;
    esac
}

